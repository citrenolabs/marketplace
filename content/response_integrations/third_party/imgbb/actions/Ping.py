from __future__ import annotations

import requests
from soar_sdk.SiemplifyAction import SiemplifyAction
from soar_sdk.SiemplifyUtils import output_handler

INTEGRATION_NAME = "Imgbb"


@output_handler
def main():
    siemplify = SiemplifyAction()

    # Extracting the integration params
    conf = siemplify.get_configuration(INTEGRATION_NAME)
    api_key = conf.get("API Key")

    # The login url
    # url = 'https://ibb.co/auth?login={0}'.format(api_key)
    url = f"https://api.imgbb.com/1/upload?expiration=600&key={api_key}"

    # Determing the body params-for the request
    data = {
        "image": "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",
    }

    response = requests.post(url, data=data)

    response.raise_for_status()

    return_value = True
    output_message = "Connected successfully"

    # Test connectivity
    siemplify.end(output_message, return_value)


if __name__ == "__main__":
    main()
